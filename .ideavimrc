"" ========================================================
"" Base Settings
"" ========================================================
set scrolloff=10
set history=1000
set number relativenumber
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell
set autoindent

" Clipboard Integration
set clipboard+=unnamed

" Leader Key
let mapleader="\<space>"

"Default Behavior
set gdefault

" iIdeaVim Specific Settings
set ideajoin
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray


"" ========================================================
"" Plugin Settings
"" ========================================================
set exchange
set commentary
set ReplaceWithRegister
set surround
set nerdtree

" Searching Plugins
set sneak
set easymotion
let g:EasyMotion_override_acejump = 0

" Highlighting Plugins
set highlightedyank
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Object Plugins
set textobj-entire
set indent-object
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"

" Which-key settings
set which-key
set notimeout
let g:WhichKey_FontSize = 16
let g:WhichKey_PrefixColor = "#0403fe"
let g:WhichKey_CommandColor = "#aa0a0a"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "false"


"" ========================================================
"" Key Mappings
"" ========================================================
" Tab navigation
nmap <C-p> <Action>(PreviousTab)
nmap <C-n> <Action>(NextTab)

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" Navigation actions
nmap <C-i> <Action>(Back)
nmap <C-o> <Action>(Forward)

" Jump between methods
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
let g:WhichKeyDesc_method_up = "[[ Method Up"
let g:WhichKeyDesc_method_down = "]] Method Down"

" Visual indentation
vnoremap < <gv
vnoremap > >gv

" IDE interaction
nmap <C-m> <Action>(ShowPopupMenu)
nmap <C-S-m> <Action>(ToolWindowsGroup)

" Clear Search Highlighitng
nnoremap <C-[> :noh<return>

" Execute macro from q register
nnoremap qj @q

" Comment lines
let g:WhichKeyDesc_comment = "<leader>/ Comment line"
map <leader>/ <action>(CommentByLineComment)

" These create newlines like o and O but stay in normal mode
nmap zj o<Esc>k
nmap zk O<Esc>j
let g:WhichKeyDesc_newline = "z New line"
let g:WhichKeyDesc_newline_above = "zk New line above cursor"
let g:WhichKeyDesc_newline_below = "zj New line below cursor"

" Folding
let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"
let g:WhichKeyDesc_fold_region = "<leader>zm Fold region"
let g:WhichKeyDesc_unfold_region = "<leader>zl Unfold region"
let g:WhichKeyDesc_fold_region_sel = "<leader>zM Fold region recursively"
let g:WhichKeyDesc_unfold_region_sel = "<leader>zL Unfold region recursively"

map <leader>zc <Action>(CollapseAllRegions)
map <leader>zo <Action>(ExpandAllRegions)
map <leader>zm <Action>(CollapseRegion)
map <leader>zl <Action>(ExpandRegion)
map <leader>zM <Action>(CollapseRegionRecursively)
map <leader>zL <Action>(ExpandRegionRecursively)

"" ========================================================
"" Leader Commands
"" ========================================================

" EasyMotion
let g:WhichKeyDesc_easymotion = "<leader><leader> EasyMotion"


" Information commands
nmap <leader>ie <action>(ShowErrorDescription)
nmap <leader>it <action>(ExpressionTypeInfo)
nmap <leader>ip <action>(ParameterInfo)
nmap <leader>ij <action>(QuickJavaDoc)
nmap <leader>if <action>(FileStructurePopup)
nmap <leader>iU <action>(ShowUmlDiagram)
nmap <leader>ih <action>(CallHierarchy)
nmap <leader>iu <action>(ShowUsages)
nmap <leader>im <action>(MethodHierarchy)
let g:WhichKeyDesc_info = "<leader>i Information"
let g:WhichKeyDesc_info_error = "<leader>ie Error Description"
let g:WhichKeyDesc_info_type = "<leader>it Expression Type"
let g:WhichKeyDesc_info_parameter = "<leader>ip Parameter Info"
let g:WhichKeyDesc_info_javadoc = "<leader>ij Java Doc"
let g:WhichKeyDesc_info_file_structure = "<leader>if File Structure"
let g:WhichKeyDesc_info_uml_diagram = "<leader>iU UML Diagram"
let g:WhichKeyDesc_info_call_hierarchy = "<leader>ih Call Hierarchy"
let g:WhichKeyDesc_info_show_usages = "<leader>iu Usages"
let g:WhichKeyDesc_info_method_hierarchy = "<leader>im Method Hierarchy"


" Window splits
nmap <leader>wv <action>(SplitVertically)
nmap <leader>wh <action>(SplitHorizontally)
nmap <leader>wu <action>(Unsplit)
nmap <leader>wm <action>(MoveEditorToOppositeTabGroup)
nmap <leader>wb <action>(Back)
nmap <leader>wf <action>(Forward)
nmap <leader>wq <action>(HideAllWindows)
nmap <leader>ws <action>(HideSideWindows)
let g:WhichKeyDesc_window = "<leader>w Window and splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_split_back = "<leader>wb Back split"
let g:WhichKeyDesc_window_split_forward = "<leader>wf Forward split"
let g:WhichKeyDesc_window_hide_all_windows = "<leader>wq Hide all windows"
let g:WhichKeyDesc_window_hide_side_windows = "<leader>ws Hide side windows"


" Tab Navigation and Management
nmap <leader>tP <Action>(PinActiveEditorTab)
nmap <leader>tg1 <Action>(GoToTab1)
nmap <leader>tg2 <Action>(GoToTab2)
nmap <leader>tg3 <Action>(GoToTab3)
nmap <leader>tg4 <Action>(GoToTab4)
nmap <leader>tg5 <Action>(GoToTab5)
nmap <leader>tg6 <Action>(GoToTab6)
nmap <leader>tg7 <Action>(GoToTab7)
nmap <leader>tg8 <Action>(GoToTab8)
nmap <leader>tg9 <Action>(GoToTab9)
nmap <leader>tx <Action>(CloseContent)
nmap <leader>tX <Action>(CloseAllEditors)
nmap <leader>to <Action>(CloseAllEditorsButActive)
nmap <leader>ta <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_tabs = "<leader>t Tabs"
let g:WhichKeyDesc_tabs_pin = "<leader>tP Pin Active Tab"
let g:WhichKeyDesc_tabs_go_to = "<leader>tg Go to Tab"
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>tg1 Go to Tab 1"
let g:WhichKeyDesc_tabs_go_to_2 = "<leader>tg2 Go to Tab 2"
let g:WhichKeyDesc_tabs_go_to_3 = "<leader>tg3 Go to Tab 3"
let g:WhichKeyDesc_tabs_go_to_4 = "<leader>tg4 Go to Tab 4"
let g:WhichKeyDesc_tabs_go_to_5 = "<leader>tg5 Go to Tab 5"
let g:WhichKeyDesc_tabs_go_to_6 = "<leader>tg6 Go to Tab 6"
let g:WhichKeyDesc_tabs_go_to_7 = "<leader>tg7 Go to Tab 7"
let g:WhichKeyDesc_tabs_go_to_8 = "<leader>tg8 Go to Tab 8"
let g:WhichKeyDesc_tabs_go_to_9 = "<leader>tg9 Go to Tab 9"
let g:WhichKeyDesc_tabs_close = "<leader>tx Close Current Tab"
let g:WhichKeyDesc_tabs_close_all = "<leader>tX Close All Tabs"
let g:WhichKeyDesc_tabs_close_all_but_active = "<leader>to Close All Tabs But Active"
let g:WhichKeyDesc_tabs_close_all_unpinned = "<leader>ta Close All Unpinned Tabs"



" Display options
map <leader>Dd <action>(ToggleDistractionFreeMode)
map <leader>Dz <action>(ToggleZenMode)
map <leader>Df <action>(ToggleFullScreen)
let g:WhichKeyDesc_display = "<leader>D Display options"
let g:WhichKeyDesc_zen_mode = "<leader>Dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>Dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>Df Toggle full screen"


" File navigation
nmap <leader>fg <Action>(GotoFile)
nmap <leader>fr <Action>(RecentFiles)
nmap <leader>ff <Action>(FindInPath)
nmap <leader>fl <Action>(RecentLocations)
nmap <leader>fs <Action>(NewScratchFile)
nmap <leader>fo <Action>(OpenFile)
nmap <leader>fy <Action>(CopyAbsolutePath)
nmap <leader>fh <Action>(LocalHistory.ShowHistory)
nmap <leader>fF <Action>(ShowFilePath)
nmap <leader>fi <Action>(SelectIn)
nmap <leader>fp <Action>(ReplaceInPath)
let g:WhichKeyDesc_file_opt = "<leader>f File navigation"
let g:WhichKeyDesc_file_opt_goto_file = "<leader>fg Go To File"
let g:WhichKeyDesc_file_opt_goto_content = "<leader>ff Find In Files"
let g:WhichKeyDesc_file_opt_show_recent_files = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_opt_show_recent_locations = "<leader>fl Recent Locations"
let g:WhichKeyDesc_file_opt_new_scratch_file = "<leader>fs New Scratch File"
let g:WhichKeyDesc_file_opt_open_file = "<leader>fo Open File"
let g:WhichKeyDesc_file_opt_copy_path = "<leader>fy Copy Absolute Path"
let g:WhichKeyDesc_file_opt_history = "<leader>fh Show Local History"
let g:WhichKeyDesc_file_opt_show_path = "<leader>fF Show File Path"
let g:WhichKeyDesc_file_opt_select_in = "<leader>fi Select In"
let g:WhichKeyDesc_file_opt_replace_in_path = "<leader>fp Replace In Path"

nmap <leader>e :NERDTreeToggle<CR>
let g:WhichKeyDesc_file_opt_toggle_nerdtree = "<leader>e Toggle NERDTree"

" Run Actions
nmap <leader>rm <action>(RunMenu)
nmap <leader>rn <action>(RunClass)
nmap <leader>rc <Action>(ContextRun)
nmap <leader>rr <action>(Rerun)
nmap <leader>rt <Action>(RunTests)
nmap <leader>rf <action>(RerunFailedTests)
nmap <leader>rs <Action>(Stop)
nmap <leader>rC <action>(ChooseRunConfiguration)
let g:WhichKeyDesc_run = "<leader>r Run"
let g:WhichKeyDesc_run_menu = "<leader>rm Run Menu"
let g:WhichKeyDesc_run_class = "<leader>rn Run Class"
let g:WhichKeyDesc_run_context = "<leader>rc Context Run"
let g:WhichKeyDesc_run_rerun = "<leader>rr Rerun"
let g:WhichKeyDesc_run_tests = "<leader>rt Run Tests"
let g:WhichKeyDesc_run_failed = "<leader>rf Rerun Failed Tests"
let g:WhichKeyDesc_run_stop = "<leader>rs Stop"
let g:WhichKeyDesc_run_choose_configuration = "<leader>rC Choose Run Configuration"


" Debugging commands
nmap <leader>dx <Action>(Debug)
nmap <leader>dc <Action>(ContextDebug)
nmap <leader>dv <Action>(ViewBreakpoints)
nmap <leader>de <Action>(EditBreakpoint)
nmap <leader>dm <Action>(XDebugger.MuteBreakpoints)
nmap <leader>dt <Action>(ToggleLineBreakpoint)
nmap <leader>dC <Action>(RunToCursor)
nmap <leader>di <Action>(StepInto)
nmap <leader>do <Action>(StepOver)
nmap <leader>dr <Action>(Resume)
nmap <leader>dR <Action>(EvaluateExpression)
nmap <leader>dt <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
let g:WhichKeyDesc_debug_execute = "<leader>dx Execute Debug"
let g:WhichKeyDesc_debug_context = "<leader>dc Context Debug"
let g:WhichKeyDesc_debug_view_breakpoints = "<leader>dv View Breakpoints"
let g:WhichKeyDesc_debug_edit_breakpoints = "<leader>de Edit Breakpoints"
let g:WhichKeyDesc_debug_mute_breakpoints = "<leader>dm Mute Breakpoints"
let g:WhichKeyDesc_debug_toggle_line_breakpoint = "<leader>dt Toggle Line Breakpoint"
let g:WhichKeyDesc_debug_run_to_cursor = "<leader>dC Run to Cursor"
let g:WhichKeyDesc_debug_step_into = "<leader>di Step Into"
let g:WhichKeyDesc_debug_step_over = "<leader>do Step Over"
let g:WhichKeyDesc_debug_resume = "<leader>dr Resume Debugging"
let g:WhichKeyDesc_debug_evaluate_expression = "<leader>dR Evaluate Expression"
let g:WhichKeyDesc_debug_activate_tool_window = "<leader>dt Activate Debug Tool Window"


" (Code) Language Actions
nmap <leader>cl <Action>(Refactorings.QuickListPopupAction)
vmap <leader>cl <Action>(Refactorings.QuickListPopupAction)
nmap <leader>cr <Action>(RenameElement)
nmap <leader>cc <Action>(ChangeSignature)
nmap <leader>cv <Action>(IntroduceVariable)
nmap <leader>ci <Action>(Inline)
nmap <leader>cf <Action>(IntroduceField)
nmap <leader>cm <Action>(ExtractMethod)
vmap <leader>cm <Action>(ExtractMethod)
nmap <leader>cC <Action>(IntroduceConstant)
nmap <leader>cp <Action>(IntroduceParameter)
nmap <leader>co <Action>(IntroduceParameterObject)
nmap <leader>ce <Action>(EncapsulateFields)
nmap <leader>ca <Action>(ShowIntentionActions)
nmap <leader>cR <Action>(ReformatCode)
nmap <leader>cI <Action>(InspectCode)
nmap <leader>cG <Action>(Generate)
let g:WhichKeyDesc_language = "<leader>c Code / Refactoring"
let g:WhichKeyDesc_language_menu = "<leader>cl Quick List"
let g:WhichKeyDesc_language_rename = "<leader>cr Rename"
let g:WhichKeyDesc_language_change_signature = "<leader>cc Change Signature"
let g:WhichKeyDesc_language_inline_variable = "<leader>ci Inline"
let g:WhichKeyDesc_language_introduce_field = "<leader>cf Introduce Field"
let g:WhichKeyDesc_language_introduce_variable = "<leader>cv Introduce Variable"
let g:WhichKeyDesc_language_extract_method = "<leader>cm Extract Method"
let g:WhichKeyDesc_language_introduce_constant = "<leader>cC Introduce Constant"
let g:WhichKeyDesc_language_introduce_parameter = "<leader>cp Introduce Parameter"
let g:WhichKeyDesc_language_introduce_param_object = "<leader>co Introduce Parameter Object"
let g:WhichKeyDesc_language_encapsulate = "<leader>ce Encapsulate Fields"
let g:WhichKeyDesc_language_show_intention_actions = "<leader>ca Show Intention Actions"
let g:WhichKeyDesc_language_reformat_code = "<leader>cR Reformat Code"
let g:WhichKeyDesc_language_inspect_code = "<leader>cI Inspect Code"
let g:WhichKeyDesc_language_generate = "<leader>cG Generate"


""" Bookmarks
nmap <leader>bm <Action>(Bookmarks)
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bp <Action>(GotoPreviousBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_menu = "<leader>bm Bookmark Menu"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"


" Go To
nmap gd <Action>(GotoDeclaration)
nmap go <Action>(GotoSuperMethod)
nmap gD <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gT <Action>(GotoTest)
let g:WhichKeyDesc_goto = "g Go To"
let g:WhichKeyDesc_goto_declaration = "gd Go To Declaration"
let g:WhichKeyDesc_goto_super_method = "go Go To Super Method"
let g:WhichKeyDesc_goto_type_declaration = "gD Go To Type Declaration"
let g:WhichKeyDesc_goto_implementation = "gi Go To Implementation"
let g:WhichKeyDesc_goto_test = "gT Go To Test"


" Search
nmap <leader>sS <action>(SearchEverywhere)
nmap <leader>su <Action>(FindUsages)
nmap <leader>sn <Action>(ShowNavBar)
nmap <leader>sa <Action>(GotoAction)
nmap <leader>sc <Action>(GotoClass)
nmap <leader>sf <Action>(GotoFile)
nmap <leader>ss <Action>(GotoSymbol)
nmap <leader>st <Action>(TextSearchAction)
let g:WhichKeyDesc_search = "<leader>s Search"
let g:WhichKeyDesc_search_everywhere = "<leader>sS Search Everywhere"
let g:WhichKeyDesc_search_usages = "<leader>su Find Usages"
let g:WhichKeyDesc_search_nav_bar = "<leader>sn Show Nav Bar"
let g:WhichKeyDesc_search_action = "<leader>sa Search Action"
let g:WhichKeyDesc_search_class = "<leader>sc Search Class"
let g:WhichKeyDesc_search_file = "<leader>sf Search File"
let g:WhichKeyDesc_search_symbol = "<leader>ss Search Symbol"
let g:WhichKeyDesc_search_text = "<leader>st Search Text"


" Case Conversion
vmap <leader>Ttm <Action>(me.laria.code.idea_caseconv.convert_case_menu)
vmap <leader>Ttc <Action>(me.laria.code.idea_caseconv.CamelCaseAction)
vmap <leader>Ttp <Action>(me.laria.code.idea_caseconv.PascalCaseAction)
vmap <leader>Tts <Action>(me.laria.code.idea_caseconv.SnakeCaseAction)
vmap <leader>TtS <Action>(me.laria.code.idea_caseconv.ScreamingSnakeCaseAction)
vmap <leader>Ttl <Action>(me.laria.code.idea_caseconv.LowerCaseAction)
vmap <leader>Ttu <Action>(me.laria.code.idea_caseconv.UpperCaseAction)
vmap <leader>Tt. <Action>(me.laria.code.idea_caseconv.DotCaseAction)
vmap <leader>Ttw <Action>(me.laria.code.idea_caseconv.SeparateWordsAction)
vmap <leader>Ttt <Action>(me.laria.code.idea_caseconv.TitleCaseAction)
vmap <leader>Tt- <Action>(me.laria.code.idea_caseconv.DashCaseAction)
vmap <leader>Ttd <Action>(me.laria.code.idea_caseconv.SentenceCaseAction)
let g:WhichKeyDesc_case_conversion = "<leader>Tt Case Conversion"
let g:WhichKeyDesc_change_case_menu = "<leader>Ttm Case Menu"
let g:WhichKeyDesc_case_conversion_camel = "<leader>Ttc camelCase"
let g:WhichKeyDesc_case_conversion_pascal = "<leader>Ttp PascalCase"
let g:WhichKeyDesc_case_conversion_snake = "<leader>Tts snake_case"
let g:WhichKeyDesc_case_conversion_screaming_snake = "<leader>TtS SCREAMING_SNAKE_CASE"
let g:WhichKeyDesc_case_conversion_lower = "<leader>Ttl lowercase"
let g:WhichKeyDesc_case_conversion_upper = "<leader>Ttu UPPERCASE"
let g:WhichKeyDesc_case_conversion_dot = "<leader>Tt. dot.case"
let g:WhichKeyDesc_case_conversion_words = "<leader>Ttw Separate Words"
let g:WhichKeyDesc_case_conversion_title = "<leader>Ttt Title Case"
let g:WhichKeyDesc_case_conversion_dash = "<leader>Tt- dash-case"
let g:WhichKeyDesc_case_conversion_sentence = "<leader>Ttd Sentence case"


" 
nmap <leader>gc <Action>(Vcs.Show.Local.Changes)
nmap <leader>gb <Action>(Git.Branches)
nmap <leader>gf <Action>(Git.Fetch)
nmap <leader>gp <Action>(Vcs.Push)
nmap <leader>gP <Action>(Git.Commit.And.Push.Executor)
nmap <leader>go <Action>(Github.View.Pull.Request)
nmap <leader>gm <Action>(VcsGroups)
nmap <leader>gg <Action>(CheckinProject)
nmap <leader>ga <Action>(Annotate)
nmap <leader>gt <Action>(ActivateVersionControlToolWindow)
nmap <leader>gr <Action>(Vcs.RollbackChangedLines)
nmap <leader>gu <Action>(Vcs.UpdateProject)
let g:WhichKeyDesc_git = "<leader>g Git"
let g:WhichKeyDesc_git_checkin = "<leader>gg Checkin"
let g:WhichKeyDesc_git_branches = "<leader>gb Branches"
let g:WhichKeyDesc_git_push = "<leader>gp Push"
let g:WhichKeyDesc_git_commit_and_push = "<leader>gP Commit & Push"
let g:WhichKeyDesc_git_menu = "<leader>gm Menu"
let g:WhichKeyDesc_git_fetch = "<leader>gf Fetch"
let g:WhichKeyDesc_git_annotate = "<leader>ga Annotate"
let g:WhichKeyDesc_git_log = "<leader>gl Log"
let g:WhichKeyDesc_git_tool = "<leader>gt Tool"
let g:WhichKeyDesc_git_rollback_changed_lines = "<leader>gr Rollback"
let g:WhichKeyDesc_git_open_pull_requests = "<leader>go Open Pull Requests"
let g:WhichKeyDesc_git_local_changes = "<leader>gc Show Local Changes"
let g:WhichKeyDesc_git_update_project = "<leader>gu Update Project"

" Other
let g:WhichKeyDesc_other_line_up = "[l Line Up"
let g:WhichKeyDesc_other_statement_up = "[s Statement Up"
let g:WhichKeyDesc_other_line_down = "]l Line Down"
let g:WhichKeyDesc_other_statement_down = "]s Statement Down"

nmap [l <Action>(MoveLineUp)
nmap [s <Action>(MoveStatementUp)
nmap ]l <Action>(MoveLineDown)
nmap ]s <Action>(MoveStatementDown)

let g:WhichKeyDesc_goto_back = "[, Go Back"
let g:WhichKeyDesc_goto_forward = "], Go Forward"
nmap [, <Action>(Back)
nmap ], <Action>(Forward)

" Salesforce
let g:WhichKeyDesc_sf = "<leader>l Salesforce"
let g:WhichKeyDesc_sf_anonymous = "<leader>la Open Anonymous Apex"
let g:WhichKeyDesc_sf_soql = "<leader>ls Open SOQL Query"
let g:WhichKeyDesc_sf_force_save = "<leader>lS Force Save"
let g:WhichKeyDesc_sf_log = "<leader>ll Open Log Analyzer"
let g:WhichKeyDesc_sf_err = "<leader>lx Open Deploy Issues"
let g:WhichKeyDesc_sf_win = "<leader>lw Open IC Window"
let g:WhichKeyDesc_sf_compare_server = "<leader>lc Compare with Server"
let g:WhichKeyDesc_sf_toggle_agentforce= "<leader>lz Toggle AgentForce"

map <leader>la <Action>(ActivateAnonymousApexToolWindow)
map <leader>ls <Action>(ActivateSOQLQueryToolWindow)
map <leader>ll <Action>(ActivateLogAnalyzerToolWindow)
map <leader>lx <Action>(ActivateIlluminatedCloudToolWindow)
map <leader>lw <Action>(IlluminatedCloudToolsGroup)
map <leader>lc <Action>(IlluminatedCloud.CompareWithServer)
map <leader>lS <Action>(IlluminatedCloud.ForceSave)
map <leader>lz <Action>(IlluminatedCloud.ShowAgentforceToolWindow)

" Visual
vmap ] <Action>(EditorSelectWord)
vmap [ <Action>(EditorUnSelectWord)

" Other
let g:WhichKeyDesc_recent_files = "<leader>, Recently changed files"
let g:WhichKeyDesc_tools = "<leader>T Tools"
let g:WhichKeyDesc_tools_actions_list = "<leader>Tl Actions List"
let g:WhichKeyDesc_tools_registers = "<leader>Tr Registers"
let g:WhichKeyDesc_tools_select_all = "<leader>Ta Select All text"
nmap <leader>, <Action>(RecentFiles)
nmap ` <Action>(GotoAction)
nmap <leader>Tl :actionlist<CR>
nmap <leader>Tr :reg<CR>
vmap <leader>Ta <Esc>ggvG$<CR>
nmap <leader>Ta <Esc>ggvG$<CR>

" Help
let g:WhichKeyDesc_help_window = "<leader>h Help"

" Help - Nerd Tree
let g:WhichKeyDesc_help_nt = "<leader>ht Nerd Tree - key bindings"
map <leader>ht <Action>()
let g:WhichKeyDesc_help_nt1 = "<leader>hto Open files, directories and bookmark"
map <leader>hto <Action>()
let g:WhichKeyDesc_help_nt2 = "<leader>htO Recursively open the selected directory"
map <leader>htO <Action>()
let g:WhichKeyDesc_help_nt3 = "<leader>htx Close the current nodes parent"
map <leader>htx <Action>()
let g:WhichKeyDesc_help_nt4 = "<leader>htX Recursively close all children of the current node"
map <leader>htX <Action>()
let g:WhichKeyDesc_help_nt5 = "<leader>hts Open selected file in a new v-split"
map <leader>hts <Action>()
let g:WhichKeyDesc_help_nt6 = "<leader>htP Jump to the root node"
map <leader>htP <Action>()
let g:WhichKeyDesc_help_nt7 = "<leader>htp Jump to current nodes parent"
map <leader>htp <Action>()
let g:WhichKeyDesc_help_nt8 = "<leader>htK Jump up inside directories at the current tree depth"
map <leader>htK <Action>()
let g:WhichKeyDesc_help_nt9 = "<leader>htJ Jump down inside directories at the current tree depth"
map <leader>htJ <Action>()
let g:WhichKeyDesc_help_nt10 = "<leader>ht<C-j> Jump down to next sibling of the current directory"
map <leader>ht<C-j> <Action>()
let g:WhichKeyDesc_help_nt11 = "<leader>ht<C-k> Jump up to next sibling of the current directory"
map <leader>ht<C-k> <Action>()
let g:WhichKeyDesc_help_nt12 = "<leader>htm Jump up to next sibling of the current directory"
map <leader>htm <Action>()
let g:WhichKeyDesc_help_nt13 = "<leader>htq Close the NERDTree window"
map <leader>htq <Action>()

" Help - Surround
let g:WhichKeyDesc_help_surround = "<leader>hs Surround - key bindings"
map <leader>hs <Action>()
let g:WhichKeyDesc_help_surround1 = "<leader>hs1 cs[motion] Change surroundings"
map <leader>hs1 <Action>()
let g:WhichKeyDesc_help_surround2 = "<leader>hs2 cst[motion] Change surroundings tag"
map <leader>hs2 <Action>()
let g:WhichKeyDesc_help_surround3 = "<leader>hs3 ds[motion] Delete surroundings"
map <leader>hs3 <Action>()
let g:WhichKeyDesc_help_surround4 = "<leader>hs4 dst[motion] Delete surroundings tag"
map <leader>hs4 <Action>()
let g:WhichKeyDesc_help_surround5 = "<leader>hs5 ys[motion] Surround text object"
map <leader>hs5 <Action>()

" Handlers
" Ctrl-C use Copy from IDE in Normal and Visual and Select mode, in Insert mode use Vim
sethandler <C-C> n-v:ide i:vim
" Ctrl-X use Cut from IDE in Normal and Visual and Select mode, in Insert mode use Vim
sethandler <C-X> n-v:ide i:vim
" Ctrl-A use Select All from IDE in Normal mode, in Insert and Visual use Vim
sethandler <C-A> n:vim i-x:ide
" Ctrl-D use Copy Line Below from IDE for Insert and Visual and Select mode, in Normal mode use Vim
sethandler <C-D> n:vim i-x:ide
